{"version":3,"sources":["components/Header.js","components/Instructions.js","components/Form.js","components/Directions.js","components/CoffeeShopsList.js","components/Footer.js","App.js","serviceWorker.js","index.js"],"names":["Header","className","Instructions","Form","props","handleLibraryInputChange","libraryInput","handleFormSubmit","handleRadiusSelected","showSuggestions","autoComplete","handleLibraryInputSelected","selectedRadius","action","htmlFor","type","id","value","onChange","placeholder","map","results","key","onClick","name","min","max","required","Directions","selectedCoffeeShop","modeOfTransportation","handleTransportationChange","directionsToCoffeeShop","src","direction","index","CoffeeShopsList","coffeeShops","handleCoffeeShopSelected","coffeeShopClicked","handleBackButton","selectedLibrary","place","properties","street","Footer","href","App","event","state","setState","target","length","axios","url","params","q","collection","then","res","data","catch","error","Swal","fire","title","text","icon","confirmButtonText","userSelectedLibrary","finalLibrary","filter","item","userSelectedLibraryLatitude","geometry","coordinates","userSelectedLibraryLongitude","userSelectedLibraryName","latitude","longitude","preventDefault","toLowerCase","getCoffeeShops","circle","sort","pageSize","response","returnedCoffeeShops","randomCoffeeShops","i","compareIndex","Math","floor","random","temp","splice","displayCoffeeShops","radiusDistance","joinedCoffeeShopCoords","coffeeShop","long","lat","join","libraryMarker","mapWithoutRoute","displayedMap","document","querySelector","scrollIntoView","setTimeout","isLoading","userSelectedCoffeeShop","currentTarget","finalCoffeeShop","userSelectedCoffeeShopLatitude","userSelectedCoffeeShopLongitude","directionsSessionID","getSelectedTransportation","apiKey","from","to","routeType","scalebar","size","route","legs","maneuvers","narrative","sessionId","mapWithRoute","distanceBetween","this","alt","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","registration","unregister","console","message"],"mappings":"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","file":"static/js/main.ed889c9d.chunk.js","sourcesContent":["import React from 'react';\n\nconst Header = () => {\n  return (\n    <header>\n      <div className='wrapper headerFlex'>\n        <h1>Reading With<span className='caffeine animate__animated animate__bounceIn'>Caffeine</span></h1>\n      </div>\n    </header>\n  );\n};\n\nexport default Header;\n","import React from 'react';\n\nconst Instructions = () => {\n    return (\n        <section className='instructionsSection'>\n            <h2>Instructions:</h2>\n            <p>Planning a trip to pick up books from your local library? Use this tool to locate a coffee shop nearby where you can relax and read your books in peace. Follow the steps below for directions.</p>\n            <p>1. Enter your library and set preferred distance.</p>\n            <p>2. A map will appear with a list of 10 coffee shops around the library.</p>\n            <p>3. Select your preferred coffee shop from the list and choose a mode of transportation to get directions.</p>\n        </section>\n    )\n};\n\nexport default Instructions;","import React from 'react';\n\nconst Form = (props) => {\n  const {\n    handleLibraryInputChange,\n    libraryInput,\n    handleFormSubmit,\n    handleRadiusSelected,\n    showSuggestions,\n    autoComplete,\n    handleLibraryInputSelected,\n    selectedRadius,\n  } = props;\n  return (\n    <>\n      <form action='submit'>\n        <div className='formTopSection'>\n\n          <label htmlFor='inputLocation'>Find Library</label>\n          <div className='inputLocationContainer'>\n            <input\n              type='text'\n              id='inputLocation'\n              className='inputLocation'\n              value={libraryInput}\n              onChange={handleLibraryInputChange}\n              placeholder=''\n              autoComplete='off'\n            />\n\n            {/* displaying autocomplete results / event handler on click */}\n            {\n              showSuggestions &&\n              <ul className='inputLocationAutoComplete'>\n                {\n                  autoComplete.map((results) => {\n                    return (\n                      <li key={results.id} className='autoCompleteResults'>\n                        <button\n                          type='button'\n                          key={results.id}\n                          onClick={handleLibraryInputSelected}\n                          value={results.name}\n                        >\n                          {results.name}\n                        </button>\n                      </li>\n                    );\n                  })\n                }\n              </ul>\n            }\n          </div>\n        </div>\n\n        <div className='formBottomSection'>\n          <label htmlFor='inputRadius'>Maximum distance <span>(1 - 20km)</span></label>\n          <input\n            type='number'\n            id='inputRadius'\n            className='inputRadius'\n            min='0'\n            max='20'\n            value={selectedRadius}\n            onChange={handleRadiusSelected}\n            placeholder=''\n            autoComplete='off'\n            required\n          />\n\n        <button className='formSubmitButton' type='submit' onClick={handleFormSubmit}>Go</button>\n\n        </div>\n\n      </form>\n    </>\n  );\n};\n\nexport default Form;\n","import React from 'react';\n\nconst Directions = (props) => {\n\n\tconst {\n\t\t\tselectedCoffeeShop,\n\t\t\tmodeOfTransportation,\n\t\t\thandleTransportationChange,\n\t\t\tdirectionsToCoffeeShop\n\t} = props;\n\n\treturn (\n\t\t<div className='transportationAndDirections'>\n\t\t\t{selectedCoffeeShop !== '' && (\n\t\t\t\t<>\n\t\t\t\t\t<div className='transportation'>\n\t\t\t\t\t\t<div className='directionMarkers'>\n\n\t\t\t\t\t\t\t<div className='directionMarkerContainer'>\n\t\t\t\t\t\t\t\t<img src='https://assets.mapquestapi.com/icon/v2/marker-start.png' />\n\t\t\t\t\t\t\t\t<p>Start</p>\n\t\t\t\t\t\t\t</div>\n\n\t\t\t\t\t\t\t<div className='directionMarkerContainer'>\n\t\t\t\t\t\t\t\t<img src='https://assets.mapquestapi.com/icon/v2/marker-end.png' />\n\t\t\t\t\t\t\t\t<p>End</p>\n\t\t\t\t\t\t\t</div>\n\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\n\t\t\t\t\t\t<div className='modeOfTransportationInputContainer'>\n\t\t\t\t\t\t\t<label htmlFor='modeOfTransportation'>Choose a mode of transportation:</label>\n\t\t\t\t\t\t\t<select id='modeOfTransportation' value={modeOfTransportation} onChange={handleTransportationChange}>\n\t\t\t\t\t\t\t\t<option value='fastest'>Drive</option>\n\t\t\t\t\t\t\t\t<option value='pedestrian'>Walk</option>\n\t\t\t\t\t\t\t\t<option value='bicycle'>Bike</option>\n\t\t\t\t\t\t\t</select>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\n\t\t\t\t\t<ol className=\"directionsToCoffeeShopOl\">\n\t\t\t\t\t\t{/* map over directions array to display ordered list of coffee shop directions */}\n\t\t\t\t\t\t{directionsToCoffeeShop.map((direction, index) => {\n\t\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t\t<li key={index}>\n\t\t\t\t\t\t\t\t\t\t{direction}\n\t\t\t\t\t\t\t\t</li>\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t})}\n\t\t\t\t\t</ol>\n\t\t\t\t</>\n\t\t\t)}\n\t\t</div>\n\t)\n};\n\nexport default Directions;","import React from 'react';\nimport Directions from \"./Directions\"\n\nconst CoffeeShopsList = (props) => {\n    const { coffeeShops, handleCoffeeShopSelected, coffeeShopClicked, selectedCoffeeShop, modeOfTransportation, handleTransportationChange, directionsToCoffeeShop, handleBackButton, selectedLibrary } = props\n    return (      \n      <div className='coffeeShops'>\n        {/* ternary operator to display the coffee shops buttons or the directions clicking on an coffee shop button */}\n        {!coffeeShopClicked ?\n          <>\n          {/* display the coffee shops list */}\n            <h2>Coffee Shops In The Area</h2>\n            <ol className='coffeeShopsContainer'>\n              {\n                coffeeShops.map((results, index) => {\n                    return (\n                      <li key={results.id}>\n                        <button\n                          className='coffeeShopButton'\n                          type='button'\n                          key={results.id}\n                          onClick={handleCoffeeShopSelected}\n                          \n                          value={results.id}>\n                            <div className=\"coffeeShopNumber\"><p>{index + 1}</p></div>\n                            <div className=\"coffeeShopText\">\n                              <h3>{results.name}</h3>\n                              <p>{results.place.properties.street}</p>\n                            </div>\n                        </button>\n                      </li>\n                    );\n                  })\n              }\n            </ol>\n          </>\n          :\n          <>\n          {/* display transportation and directions */}\n            <div className='transportation'>\n              <button className=\"transportationButton\" onClick={handleBackButton}>⬅ to Coffee Shops</button>\n            </div>\n            <h2>Directions</h2>\n            <Directions\n              selectedCoffeeShop={selectedCoffeeShop}\n              modeOfTransportation={modeOfTransportation}\n              handleTransportationChange={handleTransportationChange}\n              directionsToCoffeeShop={directionsToCoffeeShop} \n            />\n          </>\n        }\n      </div>\n    );\n};\n\nexport default CoffeeShopsList;","import React from 'react';\n\nconst Footer = () => {\n  return (\n    <footer>\n      <div className='wrapper footerFlex'>\n        <div className='creators'>\n          <p>\n            Created by Andre Facey + Connie Tsang + Kristen Delorey + Raphael Roques at <a href='https://junocollege.com/'>Juno College</a>\n          </p>\n        </div>\n        <div className='photoCredit'>\n          <p>Image by Thomas Park / Unsplash</p>\n        </div>\n      </div>\n    </footer>\n  );\n};\n\nexport default Footer;\n                    ","import React, { Component } from 'react';\nimport axios from 'axios';\nimport Swal from 'sweetalert2';\nimport './App.css';\nimport Header from './components/Header';\nimport Instructions from './components/Instructions';\nimport Form from './components/Form';\nimport CoffeeShopsList from './components/CoffeeShopsList';\nimport Footer from './components/Footer';\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      libraryInput: '', // to register change of library selection\n      autoComplete: [], // results from the prediction text\n      selectedLibrary: {}, // to grab value of library // pop in here\n      showSuggestions: false,\n      selectedRadius: 5,\n      coffeeShops: [],\n      distanceBetween: '',\n      selectedCoffeeShop: '',\n      displayedMap: '',\n      directionsToCoffeeShop: [],\n      modeOfTransportation: 'fastest',\n      directionsSessionID: '',\n      coffeeShopClicked: false,\n      isLoading: 'true',\n    };\n  }\n\n  // method to handle library input change\n  handleLibraryInputChange = (event) => {\n    // if auto complete list is not showing update state to true\n    if (!this.state.showSuggestions) {\n      this.setState({ showSuggestions: true });\n    }\n\n    // store user input for later\n    const libraryInput = event.target.value;\n\n    // this.setState(stateToSet, callBackOnce-StateToSet-isComplete)\n\n    // update state with the libraryInput\n    // then call api to get search ahead (predictive) results\n    this.setState({ libraryInput }, () => {\n      // if libraryInput is between 3 and 25 characters make a call to the api\n      // api does not allow a call for less than 3 characters\n      if (libraryInput.length >= 3 && libraryInput.length < 25) {\n        const apiKey = 'dgYN9vqDVgOBOwNtvPlR14jKSxdi9dVa';\n\n        axios({\n          url: 'https://www.mapquestapi.com/search/v3/prediction',\n          params: {\n            q: this.state.libraryInput,\n            collection: 'poi',\n            key: apiKey,\n          },\n        }).then((res) => {\n          //update autoComplete state with the returned search ahead results\n          this.setState({ autoComplete: [...res.data.results] });\n        })\n        .catch(error => {\n          Swal.fire({\n            title: 'Network Error',\n            text: 'Try searching at a later time.',\n            icon: 'warning',\n            confirmButtonText: 'Okay',\n          })\n        })\n      } else if (libraryInput.length < 3) {\n        // if libraryInput is less than 3 hide the autocomplete results\n        this.setState({ showSuggestions: false });\n      }\n    });\n  };\n\n  // method to handle the user selecting (onClick) an autocomplete result\n  handleLibraryInputSelected = (event) => {\n    // store the value of the autocomplete for later\n    const userSelectedLibrary = event.target.value;\n\n    // map over the autoComplete array in state to return the properties of the userSelectedLibrary\n    const finalLibrary = this.state.autoComplete.filter(\n      (item) => item.name === userSelectedLibrary\n    );\n\n    // gather ther library's name, latitude, and longitude to be used for location searching\n    const userSelectedLibraryLatitude =\n      finalLibrary[0].place.geometry.coordinates[1];\n    const userSelectedLibraryLongitude =\n      finalLibrary[0].place.geometry.coordinates[0];\n    const userSelectedLibraryName = finalLibrary[0].name;\n\n    // store the library's name, latitude, and longitude in object\n    const selectedLibrary = {\n      name: userSelectedLibraryName,\n      latitude: userSelectedLibraryLatitude,\n      longitude: userSelectedLibraryLongitude,\n    };\n\n    // update state with the selectedLibrary object\n    this.setState(\n      {\n        selectedLibrary,\n\n      },\n      () => {\n        // then update the library input to the userSelectedLibraryName, and hide the autocomplete list\n        this.setState({\n          libraryInput: userSelectedLibraryName,\n          showSuggestions: false,\n        });\n      }\n    );\n  };\n\n  // method to handle user submitting the library name and distance to find surrounding coffee shops\n  handleFormSubmit = (event) => {\n    // prevent form from refreshing page on submit\n    event.preventDefault();\n\n    // if user's libraryInput is less than 3 characters display an alert\n    this.state.libraryInput.length < 3 ? Swal.fire({\n      title: 'No results',\n      text: 'Library name must be greater than 3 characters.',\n      icon: 'warning',\n      confirmButtonText: 'Okay',\n    })\n\n    :\n    // if there are no autoComplete results OR the selected radius distance is less than 1 or greater than 20\n    // display an alert\n    this.state.autoComplete.length === 0 || this.state.selectedRadius < 1 || this.state.selectedRadius > 20 ?\n\n      Swal.fire({\n        title: 'No results',\n        text: 'Try another search.',\n        icon: 'warning',\n        confirmButtonText: 'Okay',\n      })\n\n      :\n      // if user does not click on an autocomplete result but types in a direct match\n      this.state.libraryInput.toLowerCase() === this.state.autoComplete[0].name.toLowerCase() ?\n        // store the library information needed for the mapquest calls in state and make api call to get the coffee shops\n        this.setState({\n          selectedLibrary: {\n            name: this.state.autoComplete[0].name,\n            latitude: this.state.autoComplete[0].place.geometry.coordinates[1],\n            longitude: this.state.autoComplete[0].place.geometry.coordinates[0],\n          },\n          showSuggestions: false,\n        }, this.getCoffeeShops)\n        // else (user clicked on autocomplete suggestion), make api call to get the surrounding coffee shops\n        : this.getCoffeeShops();\n  };\n\n  // getting surrounding coffee shops of the selected library and storing them in state\n  getCoffeeShops = () => {\n    const apiKey = 'dgYN9vqDVgOBOwNtvPlR14jKSxdi9dVa';\n    const urlSearch = 'https://www.mapquestapi.com/search/v4/place';\n\n    // make api call providing selectedLibrary longitude and latitude with query of Coffee Shops\n    axios({\n      url: urlSearch,\n      params: {\n        key: apiKey,\n        circle: `${this.state.selectedLibrary.longitude},${this.state.selectedLibrary.latitude},${this.state.selectedRadius * 1000}`,\n        sort: 'relevance',\n        q: 'Coffee Shop',\n        pageSize: 50,\n      },\n    })\n      .then((response) => {\n        // store returned results for later\n        const returnedCoffeeShops = response.data.results;\n\n        // if no results are returned then display an alert\n        if (returnedCoffeeShops.length === 0) {\n          Swal.fire({\n            title: 'No results',\n            text: 'Try another search',\n            icon: 'warning',\n            confirmButtonText: 'Okay.',\n          })\n        } else {\n          // creating a copy of the array to randomize and reduce to 10\n          let randomCoffeeShops = [...returnedCoffeeShops]\n\n          // standard fisher-yates randomizer to randomize entire array and prevent duplicates\n          for (let i = randomCoffeeShops.length - 1; i > 0; i--) {\n            const compareIndex = Math.floor(Math.random() * (i + 1));\n            let temp = randomCoffeeShops[i];\n            randomCoffeeShops[i] = randomCoffeeShops[compareIndex];\n            randomCoffeeShops[compareIndex] = temp;\n          }\n\n          // to reduce array to 10 shops -- removing everything from index 10 and beyond\n          randomCoffeeShops.splice(10);\n\n          // store the randomCoffeeShops in state, and then display them\n          this.setState({ coffeeShops: randomCoffeeShops }, this.displayCoffeeShops);\n        }\n      })\n      .catch(() => {\n        // if an error occurs during the api call display an alert\n        Swal.fire({\n          title: 'No response',\n          text: 'Try searching again later.',\n          icon: 'warning',\n          confirmButtonText: 'Okay',\n        });\n      });\n  }\n\n  // get the static map of the coffeeShops and the selectedLibrary and update the map image\n  displayCoffeeShops = () => {\n    const apiKey = 'dgYN9vqDVgOBOwNtvPlR14jKSxdi9dVa';\n    const radiusDistance = this.state.selectedRadius;\n\n    // map over stored coffeeShops and return the coordinates string needed for the static map API call\n    // ex. ['43.653427,-79.380764|marker-md-1|', '43.650378,-79.380355|marker-md-2|']\n    \n    const coffeeShopCoords = this.state.coffeeShops.map(\n      (coffeeShop, index) => {\n        const [long, lat] = coffeeShop.place.geometry.coordinates;\n        return `${lat},${long}|marker-md-${index + 1}|`;\n      }\n    );\n\n    // join the array with '|' in between\n    const joinedCoffeeShopCoords = coffeeShopCoords.join('|');\n\n    // construct the selectedLibrary marker's string\n    const libraryMarker = `${this.state.selectedLibrary.latitude},${this.state.selectedLibrary.longitude}|marker-md-350482||`;\n\n    // store the static map url to update the displayedMap in state\n    const mapWithoutRoute = `https://www.mapquestapi.com/staticmap/v5/map?key=${apiKey}&scalebar=true|bottom&locations=${libraryMarker}${joinedCoffeeShopCoords}&size=500,600&type=light&shape=radius:${radiusDistance}km|${this.state.selectedLibrary.latitude},${this.state.selectedLibrary.longitude}`;\n\n    // update the displayedMap's state with the constructed src url\n    this.setState({\n      displayedMap: mapWithoutRoute,\n      coffeeShopClicked: false,\n    }, () => {\n      // once the displayedMap has been updated, smooth scrool to the mapAndResults section\n      let mapAndResults = document.querySelector('#mapAndResults');\n      mapAndResults.scrollIntoView();\n\n      // add a 1.2s delay to allow the image to load and then set isLoading to false\n      setTimeout(() => {\n        this.setState({\n          isLoading: false,\n        })\n      }, 1200)\n    })\n  }\n\n  // handle button click to go back to the list of surrounding coffeeShops\n  handleBackButton = () => {\n    // display the list and map of the surrounding coffee shops\n    this.displayCoffeeShops();\n  }\n\n  // handle when the user selecteds a coffee shop from the list to get the directions\n  handleCoffeeShopSelected = (event) => {\n    // to prevent event bubbling down to the h3/p contained in the button\n    // use event.currentTarget to target the button where the onClick event is attached to\n    const userSelectedCoffeeShop = event.currentTarget.value;\n\n    // filter the selected coffeeShop from state\n    const finalCoffeeShop = this.state.coffeeShops.filter(\n      (item) => item.id === userSelectedCoffeeShop\n    );\n\n    // gather the selectedCoffeeShop name, latitude, and longitude for later\n    const userSelectedCoffeeShopLatitude =\n      finalCoffeeShop[0].place.geometry.coordinates[1];\n    const userSelectedCoffeeShopLongitude =\n      finalCoffeeShop[0].place.geometry.coordinates[0];\n    const userSelectedCoffeeShopName = finalCoffeeShop[0].name;\n\n    // store the selectedCoffeeShop name, latitude, and longitude in an object\n    const selectedCoffeeShop = {\n      name: userSelectedCoffeeShopName,\n      latitude: userSelectedCoffeeShopLatitude,\n      longitude: userSelectedCoffeeShopLongitude,\n    }\n\n    // set coffeeShopClicked to false to update state later\n    const coffeeShopClicked = !this.state.coffeeShopClicked\n\n    // update state with the selectedCoffeeShop\n    // clear the directionsSessionID from the directions API call\n    // set coffeeShopClicked to false\n    this.setState({\n      selectedCoffeeShop,\n      directionsSessionID: '',\n      coffeeShopClicked,\n    },\n      // after setting the selectedCoffeeShop in state completes,\n      // call this.getSelectedTransportation to populate the results of the directions (map and list of directions)\n      this.getSelectedTransportation\n    );\n\n  }\n\n  // handle getting the directions from the selectedLibrary and the selectedCoffeeShop\n  getSelectedTransportation = () => {\n\n    const apiKey = 'dgYN9vqDVgOBOwNtvPlR14jKSxdi9dVa';\n    const { selectedLibrary, selectedCoffeeShop, modeOfTransportation } = this.state;\n\n    // make api request to get the directions from the selectedLibrary to the selectedCoffeeShop\n    axios({\n      url: 'https://www.mapquestapi.com/directions/v2/route',\n      params: {\n        key: apiKey,\n        from: `${selectedLibrary.latitude},${selectedLibrary.longitude}`,\n        to: `${selectedCoffeeShop.latitude},${selectedCoffeeShop.longitude}`,\n        routeType: modeOfTransportation,\n        scalebar: 'true|bottom',\n        size: '600,600',\n        type: 'light',\n      }\n    }).then(results => {\n      // store directions array from results\n      const directions = results.data.route.legs[0].maneuvers;\n\n      // map over directions array to get the narrative text of each direction\n      const directionsToCoffeeShop = directions.map(direction => {\n        return direction.narrative;\n      })\n\n      // store the sessionId of the api call to use for the map of directions\n      const directionsSessionID = results.data.route.sessionId;\n\n      // update state with the directionsToCoffeeShop, and the directionsSessionID\n      this.setState({ directionsToCoffeeShop, directionsSessionID }, () => {\n        // once the state has been changed, update the mapWithRoute img src to display the visual directions using the sessionID of the directions api call\n        const mapWithRoute = `https://www.mapquestapi.com/staticmap/v5/map?session=${this.state.directionsSessionID}&key=${apiKey}&scalebar=true|bottom&size=500,600&type=light&traffic=flow|cons|inc`;\n        this.setState({ displayedMap: mapWithRoute });\n      })\n    })\n  }\n\n  // handle the user's input for the selected distance (radius)\n  handleRadiusSelected = (event) => {\n    const selectedRadius = event.target.value;\n    this.setState({\n      selectedRadius,\n    });\n  };\n\n  // handle the user changing the modeOfTransportation dropdown menu\n  handleTransportationChange = (event) => {\n    const modeOfTransportation = event.target.value;\n\n    this.setState({ modeOfTransportation }, this.getSelectedTransportation);\n  }\n\n  render() {\n    const {\n      handleLibraryInputChange,\n      handleLibraryInputSelected,\n      handleFormSubmit,\n      handleRadiusSelected,\n      handleCoffeeShopSelected,\n      handleTransportationChange,\n      handleBackButton,\n      state: {\n        libraryInput,\n        autoComplete,\n        showSuggestions,\n        displayedMap,\n        coffeeShops,\n        selectedCoffeeShop,\n        modeOfTransportation,\n        directionsToCoffeeShop,\n        coffeeShopClicked,\n        selectedRadius,\n        selectedLibrary,\n      },\n    } = this;\n    return (\n      <div className='App'>\n        <Header />\n        <main className='mainContainer'>\n          <div className='wrapper'>\n            <Instructions />\n            <Form\n              libraryInput={libraryInput}\n              handleLibraryInputChange={handleLibraryInputChange}\n              handleFormSubmit={handleFormSubmit}\n              handleRadiusSelected={handleRadiusSelected}\n              handleTransportationChange={handleTransportationChange}\n              showSuggestions={showSuggestions}\n              autoComplete={autoComplete}\n              handleLibraryInputSelected={handleLibraryInputSelected}\n              selectedRadius={selectedRadius}\n            />\n          </div>\n\n          {/* If there are coffeeShops then display the list of coffeeShops and the map */}\n          {this.state.coffeeShops.length > 0 ?\n              <div className='mapAndCoffeeShopBackground' id='mapAndResults'>\n                <div className='mapAndCoffeeShopContainer wrapper'>\n                  <div className='map'>\n                    {/* If state isLoading then display loader...otherise display the map */}\n                    {this.state.isLoading ? <div className='spinnerContainer'><div className='loadingSpinner'></div></div> :\n                      <img src={displayedMap} alt='' />}\n                  </div>\n\n                  <CoffeeShopsList\n                    handleCoffeeShopSelected={handleCoffeeShopSelected}\n                    coffeeShops={coffeeShops}\n                    coffeeShopClicked={coffeeShopClicked}\n                    selectedCoffeeShop={selectedCoffeeShop}\n                    modeOfTransportation={modeOfTransportation}\n                    handleTransportationChange={handleTransportationChange}\n                    directionsToCoffeeShop={directionsToCoffeeShop}\n                    handleBackButton={handleBackButton} \n                    selectedLibrary={selectedLibrary}\n                  />\n                </div>\n              </div>\n            : null}\n\n        </main>\n        <Footer />\n      </div >\n    );\n  }\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}