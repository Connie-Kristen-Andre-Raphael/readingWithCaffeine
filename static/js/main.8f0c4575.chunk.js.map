{"version":3,"sources":["Header.js","Instructions.js","Form.js","Directions.js","CoffeeShopsList.js","Footer.js","App.js","serviceWorker.js","index.js"],"names":["Header","className","Instructions","Form","props","handleLibraryInputChange","libraryInput","handleFormSubmit","handleRadiusSelected","showSuggestions","autoComplete","handleLibraryInputSelected","selectedRadius","action","htmlFor","type","id","value","onChange","placeholder","map","results","key","onClick","name","min","max","required","Directions","selectedCoffeeShop","modeOfTransportation","handleTransportationChange","directionsToCoffeeShop","direction","index","CoffeeShopsList","coffeeShops","handleCoffeeShopSelected","coffeeShopClicked","handleBackButton","Fragment","class","displayString","Footer","href","App","event","state","setState","target","length","axios","url","params","q","collection","then","res","data","userSelectedLibrary","finalLibrary","filter","item","userSelectedLibraryLatitude","place","geometry","coordinates","userSelectedLibraryLongitude","userSelectedLibraryName","selectedLibrary","latitude","longitude","preventDefault","Swal","fire","title","text","icon","confirmButtonText","toLowerCase","getCoffeeShops","circle","sort","pageSize","response","returnedCoffeeShops","randomCoffeeShops","i","compareIndex","Math","floor","random","temp","splice","displayCoffeeShops","catch","error","console","log","radiusDistance","joinedCoffeeShopCoords","coffeeShop","long","lat","join","mapWithoutRoute","displayedMap","setTimeout","isLoading","userSelectedCoffeeShop","finalCoffeeShop","userSelectedCoffeeShopLatitude","userSelectedCoffeeShopLongitude","directionsSessionID","getSelectedTransportation","apiKey","from","to","routeType","scalebar","size","route","legs","maneuvers","narrative","sessionId","mapWithRoute","distanceBetween","this","src","alt","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.8f0c4575.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Header = () => {\r\n  return (\r\n    <header>\r\n      <div className=\"wrapper headerFlex\">\r\n        <h1 className=\"highlight\">Reading With<span className=\"caffeine animate__animated animate__bounceIn\">Caffeine</span></h1>\r\n      </div>\r\n    </header>\r\n  );\r\n};\r\n\r\nexport default Header;\r\n","import React from 'react';\r\n\r\nconst Instructions = () => {\r\n    return (\r\n        <section className=\"instructionsSection\">\r\n            <h2>Instructions:</h2>\r\n            <p>Planning a trip to pick up books from your local library? Use this tool to locate a coffee shop nearby where you can relax and read your books in peace. Follow the steps below for directions.</p>\r\n            <p>1. Enter your library and set preferred distance.</p>\r\n            <p>2. A map will appear with a list of 10 coffee shops around the library.</p>\r\n            <p>3. Select your preferred coffee shop from the list and choose a mode of transportation to get directions.</p>\r\n        </section>\r\n    )\r\n};\r\n\r\nexport default Instructions;","import React from 'react';\r\n\r\nconst Form = (props) => {\r\n  const {\r\n    handleLibraryInputChange,\r\n    libraryInput,\r\n    handleFormSubmit,\r\n    handleRadiusSelected,\r\n    showSuggestions,\r\n    autoComplete,\r\n    handleLibraryInputSelected,\r\n    selectedRadius,\r\n  } = props;\r\n  return (\r\n    <>\r\n      <form action='submit'>\r\n        <div className=\"formTopSection\">\r\n          <label htmlFor='inputLocation'>Find Library</label>\r\n          <div className=\"inputLocationContainer\">\r\n            <input\r\n              type='text'\r\n              id='inputLocation'\r\n              className='inputLocation'\r\n              value={libraryInput}\r\n              onChange={handleLibraryInputChange}\r\n              placeholder=''\r\n              autoComplete=\"off\"\r\n            />\r\n            {\r\n              showSuggestions &&\r\n              <ul className=\"inputLocationAutoComplete\">\r\n                {\r\n                  autoComplete.map((results) => {\r\n                    return (\r\n                      <li key={results.id} className='autoCompleteResults'>\r\n                        <button\r\n                          type='button'\r\n                          key={results.id}\r\n                          onClick={handleLibraryInputSelected}\r\n                          value={results.name}\r\n                        >\r\n                          {results.name}\r\n                        </button>\r\n                      </li>\r\n                    );\r\n                  })\r\n                }\r\n              </ul>\r\n            }\r\n          </div>\r\n        </div>\r\n\r\n        <div className=\"formBottomSection\">\r\n          {/* <p>Radius <span>(km)</span></p> */}\r\n          <label htmlFor='inputRadius'>Maximum distance (1-20km)</label>\r\n\r\n\r\n\r\n          <input\r\n            type='number'\r\n            id='inputRadius'\r\n            className='inputLocation'\r\n            min='0'\r\n            max='20'\r\n            value={selectedRadius}\r\n            onChange={handleRadiusSelected}\r\n            placeholder=''\r\n            autoComplete=\"off\"\r\n            required\r\n          />\r\n\r\n          {/* <div className=\"selectedRadiusContainer\">\r\n            <input\r\n              type='radio'\r\n              value={5000}\r\n              id='radius5km'\r\n              name='selectedRadius'\r\n              className='sr-only'\r\n              onChange={handleRadiusSelected}\r\n              defaultChecked\r\n            />\r\n            <label htmlFor='radius5km'>5</label>\r\n          </div>\r\n\r\n          <div className=\"selectedRadiusContainer\">\r\n            <input\r\n              type='radio'\r\n              value={20000}\r\n              id='radius20km'\r\n              name='selectedRadius'\r\n              onChange={handleRadiusSelected}\r\n              className='sr-only'\r\n            /> */}\r\n          {/* <label htmlFor='radius20km'>20</label> */}\r\n          {/* </div> */}\r\n\r\n          <div>\r\n            <button className='formSubmitButton' type='submit' onClick={handleFormSubmit}>\r\n              Go\r\n          </button>\r\n          </div>\r\n\r\n        </div>\r\n\r\n\r\n\r\n      </form>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Form;\r\n","import React from 'react';\r\n\r\nconst Directions = (props) => {\r\n\r\n    const {\r\n        selectedCoffeeShop,\r\n        modeOfTransportation,\r\n        handleTransportationChange,\r\n        directionsToCoffeeShop\r\n    } = props;\r\n\r\n    return (\r\n        <div className='transportationAndDirections'>\r\n            {selectedCoffeeShop !== '' && (\r\n                <>\r\n                    <div className='transportation'>\r\n                        <label htmlFor='modeOfTransportation'>Choose a mode of transportation:</label>\r\n                        <select id='modeOfTransportation' value={modeOfTransportation} onChange={handleTransportationChange}>\r\n                            <option value='fastest'>Drive</option>\r\n                            <option value='pedestrian'>Walk</option>\r\n                            <option value='bicycle'>Bike</option>\r\n                        </select>\r\n                    </div>\r\n\r\n                    <ol>\r\n                        {directionsToCoffeeShop.map((direction, index) => {\r\n                            return (\r\n                                <li key={index}>\r\n                                    {direction}\r\n                                </li>\r\n                            );\r\n                        })}\r\n                    </ol>\r\n                </>\r\n            )}\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default Directions;","import React from 'react';\r\nimport Directions from \"./Directions\"\r\n\r\nconst CoffeeShopsList = (props) => {\r\n\r\n    const { coffeeShops, handleCoffeeShopSelected, coffeeShopClicked, selectedCoffeeShop, modeOfTransportation, handleTransportationChange, directionsToCoffeeShop, handleBackButton } = props\r\n    return (\r\n        <>\r\n            <div className=\"coffeeShops\">\r\n                <>{!coffeeShopClicked ?\r\n\r\n\r\n                    <>\r\n                        <h2>Coffee Shops</h2>\r\n                        <ol className=\"coffeeShopsContainer\">\r\n                            {\r\n                                coffeeShops.map((results) => {\r\n                                    return (\r\n                                        <li key={results.id}>\r\n                                            <button\r\n                                                type='button'\r\n                                                key={results.id}\r\n                                                onClick={handleCoffeeShopSelected}\r\n                                                value={results.id}>\r\n                                                {results.displayString}\r\n                                            </button>\r\n                                        </li>\r\n                                    );\r\n                                })\r\n                            }\r\n                        </ol>\r\n                    </>\r\n                    :\r\n                    <React.Fragment>\r\n                        {/* <button>SELECT ANOTHER COFFEE SHOP</button> */}\r\n\r\n\r\n                        <div className='transportation'>\r\n                            <button onClick={handleBackButton}><i class=\"fas fa-chevron-square-left\"></i> to Coffee Shops</button>\r\n                            {/* <label htmlFor='coffeeShops'>Select another Coffee Shop:</label>\r\n                            <select className=\"coffeeShopsDropdown\" id='coffeeShops'>\r\n                                {coffeeShops.map((results) => {\r\n                                    return (\r\n                                        <option key={results.id} className=\"coffeeShopsDropdown\" value={results.id}\r\n                                            onClick={handleCoffeeShopSelected}>\r\n                                            {results.displayString}\r\n                                        </option>\r\n                                    );\r\n                                })}\r\n                            </select> */}\r\n                        </div>\r\n\r\n\r\n                        <h2>Directions</h2>\r\n                        <Directions\r\n                            selectedCoffeeShop={selectedCoffeeShop}\r\n                            modeOfTransportation={modeOfTransportation}\r\n                            handleTransportationChange={handleTransportationChange}\r\n                            directionsToCoffeeShop={directionsToCoffeeShop} />\r\n                    </React.Fragment>\r\n\r\n                }</>\r\n\r\n            </div>\r\n\r\n        </>\r\n    );\r\n};\r\n\r\nexport default CoffeeShopsList;","import React from 'react';\r\n\r\nconst Footer = () => {\r\n  return (\r\n    <footer>\r\n      <div className=\"wrapper footerFlex\">\r\n        <div className=\"creators\">\r\n          <p>\r\n            Created by Andre Facey + Connie Tsang + Kristen Delorey + Raphael Roques at <a href='https://junocollege.com/'>Juno College</a>\r\n          </p>\r\n        </div>\r\n        <div className=\"photoCredit\">\r\n          <p>Image by Thomas Park / Unsplash</p>\r\n        </div>\r\n      </div>\r\n    </footer>\r\n  );\r\n};\r\n\r\nexport default Footer;\r\n","import React, { Component } from 'react';\r\nimport axios from 'axios';\r\nimport Swal from 'sweetalert2';\r\n\r\nimport './App.css';\r\nimport Header from './Header';\r\nimport Instructions from './Instructions';\r\nimport Form from './Form';\r\nimport CoffeeShopsList from './CoffeeShopsList';\r\n// import Directions from './Directions';\r\nimport Footer from './Footer';\r\n\r\nclass App extends Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      libraryInput: '', // to register change of library selection\r\n      autoComplete: [], // results from the prediction text\r\n      selectedLibrary: {}, // to grab value of library // pop in here\r\n      showSuggestions: false,\r\n      selectedRadius: 5,\r\n      coffeeShops: [],\r\n      distanceBetween: '',\r\n      selectedCoffeeShop: '',\r\n      displayedMap: '',\r\n      directionsToCoffeeShop: [],\r\n      modeOfTransportation: 'fastest',\r\n      directionsSessionID: '',\r\n      coffeeShopClicked: false,\r\n      isLoading: 'true',\r\n    };\r\n  }\r\n\r\n  handleLibraryInputChange = (event) => {\r\n    if (!this.state.showSuggestions) {\r\n      this.setState({ showSuggestions: true });\r\n    }\r\n    const libraryInput = event.target.value;\r\n\r\n    // this.setState(stateToSet, callBackOnce-StateToSet-isComplete)\r\n    this.setState({ libraryInput }, () => {\r\n      if (libraryInput.length >= 3 && libraryInput.length < 25) {\r\n        const apiKey = 'rNUBvav2dEGGss4WVvHK64tVGGygn3zB';\r\n\r\n        axios({\r\n          url: 'http://www.mapquestapi.com/search/v3/prediction',\r\n          // url: 'https://www.mapquestapi.com/search/v4/place',\r\n          params: {\r\n            q: this.state.libraryInput,\r\n            collection: 'poi',\r\n            key: apiKey,\r\n          },\r\n        }).then((res) => {\r\n          this.setState({ autoComplete: [...res.data.results] });\r\n        })\r\n      } else if (libraryInput.length < 3) {\r\n        this.setState({ showSuggestions: false });\r\n      }\r\n    });\r\n  };\r\n\r\n  handleLibraryInputSelected = (event) => {\r\n\r\n    const userSelectedLibrary = event.target.value;\r\n\r\n    const finalLibrary = this.state.autoComplete.filter(\r\n      (item) => item.name === userSelectedLibrary\r\n    );\r\n\r\n    const userSelectedLibraryLatitude =\r\n      finalLibrary[0].place.geometry.coordinates[1];\r\n    const userSelectedLibraryLongitude =\r\n      finalLibrary[0].place.geometry.coordinates[0];\r\n    const userSelectedLibraryName = finalLibrary[0].name;\r\n\r\n    const selectedLibrary = {\r\n      name: userSelectedLibraryName,\r\n      latitude: userSelectedLibraryLatitude,\r\n      longitude: userSelectedLibraryLongitude,\r\n    };\r\n\r\n    this.setState(\r\n      {\r\n        selectedLibrary,\r\n\r\n      },\r\n      () => {\r\n        this.setState({\r\n          libraryInput: userSelectedLibraryName,\r\n          showSuggestions: false,\r\n        });\r\n      }\r\n    );\r\n  };\r\n\r\n  handleFormSubmit = (event) => {\r\n    event.preventDefault();\r\n\r\n    this.state.autoComplete.length === 0 || this.state.selectedRadius < 1 || this.state.selectedRadius > 20 ?\r\n\r\n      Swal.fire({\r\n        title: 'No results',\r\n        text: 'Try another search.',\r\n        icon: 'warning',\r\n        confirmButtonText: 'Okay',\r\n      })\r\n\r\n      :\r\n\r\n      this.state.libraryInput.toLowerCase() === this.state.autoComplete[0].name.toLowerCase() ?\r\n\r\n        this.setState({\r\n          selectedLibrary: {\r\n            name: this.state.autoComplete[0].name,\r\n            latitude: this.state.autoComplete[0].place.geometry.coordinates[1],\r\n            longitude: this.state.autoComplete[0].place.geometry.coordinates[0],\r\n          },\r\n          showSuggestions: false,\r\n        }, this.getCoffeeShops)\r\n\r\n        : this.getCoffeeShops();\r\n  };\r\n\r\n  // getting coffee shops in the list\r\n  getCoffeeShops = () => {\r\n    const apiKey = 'rNUBvav2dEGGss4WVvHK64tVGGygn3zB';\r\n    const urlSearch = 'https://www.mapquestapi.com/search/v4/place';\r\n\r\n    axios({\r\n      url: urlSearch,\r\n      params: {\r\n        key: apiKey,\r\n        circle: `${this.state.selectedLibrary.longitude},${this.state.selectedLibrary.latitude},${this.state.selectedRadius * 1000}`,\r\n        sort: 'relevance',\r\n        q: 'Coffee Shop',\r\n        pageSize: 50,\r\n      },\r\n    })\r\n      .then((response) => {\r\n        const returnedCoffeeShops = response.data.results;\r\n\r\n        if (returnedCoffeeShops.length === 0) {\r\n          Swal.fire({\r\n            title: 'No results',\r\n            text: 'Try another search',\r\n            icon: 'warning',\r\n            confirmButtonText: 'Okay.',\r\n          })\r\n        } else {\r\n          // creating a copy of the array to randomize and reduce to 10\r\n          let randomCoffeeShops = [...returnedCoffeeShops]\r\n  \r\n          // standard fisher-yates randomizer to randomize entire array and prevent duplicates\r\n          for (let i = randomCoffeeShops.length - 1; i > 0; i--) {\r\n            const compareIndex = Math.floor(Math.random() * (i + 1));\r\n            let temp = randomCoffeeShops[i];\r\n            randomCoffeeShops[i] = randomCoffeeShops[compareIndex];\r\n            randomCoffeeShops[compareIndex] = temp;\r\n          }\r\n  \r\n          // to reduce array to 10 shops -- removing everything from index 10 and beyond\r\n          randomCoffeeShops.splice(10);\r\n  \r\n          this.setState({ coffeeShops: randomCoffeeShops }, this.displayCoffeeShops);\r\n        }\r\n      })\r\n      // .then(this.displayCoffeeShops)\r\n      .catch((error) => {\r\n        console.log(error)\r\n        Swal.fire({\r\n          title: 'No results',\r\n          text: 'Try another keyword.',\r\n          icon: 'warning',\r\n          confirmButtonText: 'Okay',\r\n        });\r\n      });\r\n  }\r\n\r\n  displayCoffeeShops = () => {\r\n    console.log('display coffees');\r\n    const apiKey = 'rNUBvav2dEGGss4WVvHK64tVGGygn3zB';\r\n    const radiusDistance = this.state.selectedRadius;\r\n\r\n    const coffeeShopCoords = this.state.coffeeShops.map(\r\n      (coffeeShop, index) => {\r\n        const [long, lat] = coffeeShop.place.geometry.coordinates;\r\n        // return coffeeShop.place.geometry.coordinates;\r\n        return `${lat},${long}|marker-md-${index + 1}|`;\r\n        // 43.653427,-79.380764|marker-md-2||43.650378,-79.380355|\r\n      }\r\n    );\r\n\r\n    const joinedCoffeeShopCoords = coffeeShopCoords.join('|');\r\n\r\n    const mapWithoutRoute = `https://www.mapquestapi.com/staticmap/v5/map?key=${apiKey}&scalebar=true|bottom&locations=${joinedCoffeeShopCoords}&size=600,600&type=light&shape=radius:${radiusDistance}km|${this.state.selectedLibrary.latitude},${this.state.selectedLibrary.longitude}`;\r\n\r\n    this.setState({\r\n      displayedMap: mapWithoutRoute,\r\n      coffeeShopClicked: false,\r\n    }, () => {\r\n      setTimeout(() => {\r\n        this.setState({\r\n          // changes the isLoading state -- when the images are ready, will load in the render\r\n          isLoading: false,\r\n        })\r\n      }, 1200)\r\n    })\r\n  }\r\n\r\n  handleBackButton = () => {\r\n    this.displayCoffeeShops();\r\n  }\r\n\r\n\r\n  handleCoffeeShopSelected = (event) => {\r\n    const userSelectedCoffeeShop = event.target.value;\r\n\r\n    const finalCoffeeShop = this.state.coffeeShops.filter(\r\n      (item) => item.id === userSelectedCoffeeShop\r\n    );\r\n\r\n    const userSelectedCoffeeShopLatitude =\r\n      finalCoffeeShop[0].place.geometry.coordinates[1];\r\n    const userSelectedCoffeeShopLongitude =\r\n      finalCoffeeShop[0].place.geometry.coordinates[0];\r\n    const userSelectedCoffeeShopName = finalCoffeeShop[0].name;\r\n\r\n    const selectedCoffeeShop = {\r\n      name: userSelectedCoffeeShopName,\r\n      latitude: userSelectedCoffeeShopLatitude,\r\n      longitude: userSelectedCoffeeShopLongitude,\r\n    }\r\n    const coffeeShopClicked = !this.state.coffeeShopClicked\r\n\r\n    this.setState({\r\n      selectedCoffeeShop,\r\n      directionsSessionID: '',\r\n      coffeeShopClicked,\r\n    },\r\n      // after setting the selectedCoffeeShop in state completes,\r\n      // call this.getSelectedTransportation to populate the results of the directions (map and list of directions)\r\n      this.getSelectedTransportation\r\n    );\r\n\r\n  }\r\n\r\n  getSelectedTransportation = () => {\r\n\r\n    const apiKey = 'rNUBvav2dEGGss4WVvHK64tVGGygn3zB';\r\n    const { selectedLibrary, selectedCoffeeShop, modeOfTransportation } = this.state;\r\n\r\n    // make api request to get the directions from the selectedLibrary to the selectedCoffeeShop\r\n    axios({\r\n      url: 'http://www.mapquestapi.com/directions/v2/route',\r\n      params: {\r\n        key: apiKey,\r\n        from: `${selectedLibrary.latitude},${selectedLibrary.longitude}`,\r\n        to: `${selectedCoffeeShop.latitude},${selectedCoffeeShop.longitude}`,\r\n        routeType: modeOfTransportation,\r\n        scalebar: 'true|bottom',\r\n        size: '600,600',\r\n        type: 'light',\r\n      }\r\n    }).then(results => {\r\n      console.log(results);\r\n      // store directions array from results\r\n      const directions = results.data.route.legs[0].maneuvers;\r\n\r\n      // map over directions array to get the narrative text of each direction\r\n      const directionsToCoffeeShop = directions.map(direction => {\r\n        return direction.narrative;\r\n      })\r\n\r\n      // store the sessionId of the api call to use for the map of directions\r\n      const directionsSessionID = results.data.route.sessionId;\r\n\r\n      // update state with the directionsToCoffeeShop, and the directionsSessionID\r\n      this.setState({ directionsToCoffeeShop, directionsSessionID }, () => {\r\n        // once the state has been changed, update the mapWithRoute img src to display the visual directions using the sessionID of the directions api call\r\n        const mapWithRoute = `https://www.mapquestapi.com/staticmap/v5/map?session=${this.state.directionsSessionID}&key=${apiKey}&scalebar=true|bottom&size=600,600&type=light&traffic=flow|cons|inc`;\r\n        this.setState({ displayedMap: mapWithRoute });\r\n      })\r\n    })\r\n\r\n  }\r\n\r\n\r\n  handleRadiusSelected = (event) => {\r\n    const selectedRadius = event.target.value;\r\n    this.setState({\r\n      selectedRadius,\r\n    });\r\n  };\r\n\r\n  handleTransportationChange = (event) => {\r\n    const modeOfTransportation = event.target.value;\r\n\r\n    this.setState({ modeOfTransportation }, this.getSelectedTransportation);\r\n  }\r\n\r\n  render() {\r\n    const {\r\n      handleLibraryInputChange,\r\n      handleLibraryInputSelected,\r\n      handleFormSubmit,\r\n      handleRadiusSelected,\r\n      handleCoffeeShopSelected,\r\n      handleTransportationChange,\r\n      handleBackButton,\r\n      state: {\r\n        libraryInput,\r\n        autoComplete,\r\n        showSuggestions,\r\n        displayedMap,\r\n        coffeeShops,\r\n        selectedCoffeeShop,\r\n        modeOfTransportation,\r\n        directionsToCoffeeShop,\r\n        coffeeShopClicked,\r\n        selectedRadius,\r\n      },\r\n    } = this;\r\n    return (\r\n      <div className='App'>\r\n        <Header />\r\n        <main className=\"wrapper mainContainer\">\r\n          <Instructions />\r\n          <Form\r\n            libraryInput={libraryInput}\r\n            handleLibraryInputChange={handleLibraryInputChange}\r\n            handleFormSubmit={handleFormSubmit}\r\n            handleRadiusSelected={handleRadiusSelected}\r\n            handleTransportationChange={handleTransportationChange}\r\n            showSuggestions={showSuggestions}\r\n            autoComplete={autoComplete}\r\n            handleLibraryInputSelected={handleLibraryInputSelected}\r\n            selectedRadius={selectedRadius}\r\n          />\r\n\r\n          {this.state.coffeeShops.length > 0 ?\r\n            <>\r\n              <div className=\"mapAndCoffeeShopContainer\">\r\n\r\n                <div className=\"map\">\r\n                  {this.state.isLoading ? <div className=\"spinnerContainer\"><div className=\"loadingSpinner\"></div></div> :\r\n                    <img src={displayedMap} alt=\"\" />}\r\n                </div>\r\n\r\n                <CoffeeShopsList\r\n                  handleCoffeeShopSelected={handleCoffeeShopSelected}\r\n                  coffeeShops={coffeeShops}\r\n                  coffeeShopClicked={coffeeShopClicked}\r\n                  selectedCoffeeShop={selectedCoffeeShop}\r\n                  modeOfTransportation={modeOfTransportation}\r\n                  handleTransportationChange={handleTransportationChange}\r\n                  directionsToCoffeeShop={directionsToCoffeeShop}\r\n                  handleBackButton={handleBackButton} />\r\n              </div>\r\n\r\n            </>\r\n            : null}\r\n\r\n        </main >\r\n        <Footer />\r\n      </div >\r\n    );\r\n  }\r\n}\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}